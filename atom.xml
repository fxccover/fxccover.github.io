<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星巢</title>
  
  <subtitle>遇见不一样的自己</subtitle>
  <link href="https://fxccover.github.io/atom.xml" rel="self"/>
  
  <link href="https://fxccover.github.io/"/>
  <updated>2023-09-11T13:48:30.701Z</updated>
  <id>https://fxccover.github.io/</id>
  
  <author>
    <name>fxccover</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>筛法求约数和</title>
    <link href="https://fxccover.github.io/2023/09/11/%E7%AD%9B%E6%B3%95%E6%B1%82%E7%BA%A6%E6%95%B0%E5%92%8C/"/>
    <id>https://fxccover.github.io/2023/09/11/%E7%AD%9B%E6%B3%95%E6%B1%82%E7%BA%A6%E6%95%B0%E5%92%8C/</id>
    <published>2023-09-11T12:02:11.000Z</published>
    <updated>2023-09-11T13:48:30.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="筛法求约数和"><a href="#筛法求约数和" class="headerlink" title="筛法求约数和"></a>筛法求约数和</h1><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309112003365.png" style="zoom:50%"/></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> f[N];<span class="comment">//记录i的最小质因子的1+p^1+p^2+...+p^k </span></span><br><span class="line"><span class="type">int</span> sum[N];<span class="comment">//记录i的约数和 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_cnt</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">p[cnt++]=i;</span><br><span class="line">f[i]=sum[i]=i+<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;i*p[j]&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> m=i*p[j];</span><br><span class="line">st[m]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)&#123;</span><br><span class="line">f[m]=f[i]*p[j]+<span class="number">1</span>;</span><br><span class="line">sum[m]=sum[i]/f[i]*f[m];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[m]=p[j]+<span class="number">1</span>;</span><br><span class="line">sum[m]=sum[i]*f[m];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-欧拉筛求欧拉函数、约数个数、约数和都是在欧拉筛的模板上进行改动的，不同需求采用不同的更新方式。"><a href="#总结-欧拉筛求欧拉函数、约数个数、约数和都是在欧拉筛的模板上进行改动的，不同需求采用不同的更新方式。" class="headerlink" title="总结:欧拉筛求欧拉函数、约数个数、约数和都是在欧拉筛的模板上进行改动的，不同需求采用不同的更新方式。"></a>总结:欧拉筛求欧拉函数、约数个数、约数和都是在欧拉筛的模板上进行改动的，不同需求采用不同的更新方式。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;筛法求约数和&quot;&gt;&lt;a href=&quot;#筛法求约数和&quot; class=&quot;headerlink&quot; title=&quot;筛法求约数和&quot;&gt;&lt;/a&gt;筛法求约数和&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/fxccover/starnes</summary>
      
    
    
    
    
    <category term="算法模板" scheme="https://fxccover.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>筛法求约数个数</title>
    <link href="https://fxccover.github.io/2023/09/11/%E7%AD%9B%E6%B3%95%E6%B1%82%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0/"/>
    <id>https://fxccover.github.io/2023/09/11/%E7%AD%9B%E6%B3%95%E6%B1%82%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0/</id>
    <published>2023-09-11T11:09:03.000Z</published>
    <updated>2023-09-11T13:47:50.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="筛法求约数个数"><a href="#筛法求约数个数" class="headerlink" title="筛法求约数个数"></a>筛法求约数个数</h1><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309111919058.png" style="zoom:50%"/></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//记录i的最小质因子的次数 </span></span><br><span class="line"><span class="type">int</span> cnt[N];<span class="comment">//记录i的约数个数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_cnt</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">p[cnt++]=i;</span><br><span class="line">a[i]=<span class="number">1</span>;</span><br><span class="line">cnt[i]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;i*p[j]&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> m=i*p[j];</span><br><span class="line">st[m]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)&#123;</span><br><span class="line">a[m]=a[i]+<span class="number">1</span>;</span><br><span class="line">cnt[m]=cnt[i]/(a[i]+<span class="number">1</span>)*(a[m]+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cnt[m]=cnt[i]/a[m]*(a[m]+1);</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[m]=<span class="number">1</span>;</span><br><span class="line">cnt[m]=cnt[i]*(a[m]+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cnt[m]=cnt[i]*2;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a>个人理解：</h3><p>在进行枚举时和欧拉筛线性筛出质数是一样的，这样能保证每个数只被最小质因子筛过一次。由于 $m=i*p[j]$，如果 $i$ 是 $p[j]$ 的倍数，则可以证明出 $p[j]$ 是 $i$ 和 $m$ 的最小质因数，则 $m$ 相对于 $i$ 来说比它多乘了一个共有的最小质因子 $p[j]$ ；如果 $i$ 不是 $p[j]$ 的倍数，说明 $m$ 比 $i$ 多乘了一个它没有的质因子 $p[j]$ 。</p><h4 id="重点：对于每个数而言，约数个数是唯一分解定理之后，每个质因数指数加1后累乘"><a href="#重点：对于每个数而言，约数个数是唯一分解定理之后，每个质因数指数加1后累乘" class="headerlink" title="重点：对于每个数而言，约数个数是唯一分解定理之后，每个质因数指数加1后累乘"></a>重点：对于每个数而言，约数个数是唯一分解定理之后，每个质因数指数加1后累乘</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;筛法求约数个数&quot;&gt;&lt;a href=&quot;#筛法求约数个数&quot; class=&quot;headerlink&quot; title=&quot;筛法求约数个数&quot;&gt;&lt;/a&gt;筛法求约数个数&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/fxccover/sta</summary>
      
    
    
    
    
    <category term="算法模板" scheme="https://fxccover.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>欧拉函数</title>
    <link href="https://fxccover.github.io/2023/09/09/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>https://fxccover.github.io/2023/09/09/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</id>
    <published>2023-09-09T11:57:27.000Z</published>
    <updated>2023-09-09T12:45:17.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h1><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309092012617.png" style="zoom:50%"/></p><h2 id="试除法求欧拉函数"><a href="#试除法求欧拉函数" class="headerlink" title="试除法求欧拉函数"></a>试除法求欧拉函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//试除法求欧拉函数</span></span><br><span class="line"><span class="type">int</span> res=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n/i;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">res=res/i*(i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>) res=res/n*(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h2><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309092017244.png" style="zoom:50%"/></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似欧拉筛模板</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_phi</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">p[cnt++]=i;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;p[j]*i&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> m=p[j]*i;</span><br><span class="line">st[m]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)&#123;<span class="comment">//i包含了m的所有质因子</span></span><br><span class="line">phi[m]=p[j]*phi[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> phi[m]=(p[j]<span class="number">-1</span>)*phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/fxccover/starnest@main/i</summary>
      
    
    
    
    
    <category term="算法模板" scheme="https://fxccover.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>CF1864D</title>
    <link href="https://fxccover.github.io/2023/09/03/CF1864D/"/>
    <id>https://fxccover.github.io/2023/09/03/CF1864D/</id>
    <published>2023-09-03T02:31:24.000Z</published>
    <updated>2023-09-03T04:12:00.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1864D-Matrix-Cascade题解"><a href="#CF1864D-Matrix-Cascade题解" class="headerlink" title="CF1864D Matrix Cascade题解"></a>CF1864D Matrix Cascade题解</h1><p><a href="https://codeforces.com/contest/1864/problem/D">题目链接</a></p><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一个由 $0$和 $1$ 组成的大小为 $n*n$ 的矩阵。</p><p>定义一次操作为：选择矩阵上第 $i$ 行第 $j$ 列一个位置 $(i,j)$，将其取反，并取反所有满足 $x&gt;i,x-i \geq|y-j|$ 的位置 $(i,j)$。</p><p>其中，“取反”的意思为：把 $0$ 变为 $1$，$1$ 变为 $0$。</p><p>求要把给定矩阵全变为 $0$ 的最少操作次数。</p><p>有 $t$ 组测试数据。</p><p>数据范围：$1\leq t \leq 10^5,2\leq n \leq 3000$，保证所有测试数据中 $n^2 \leq 9\times10^6$。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>形象化操作就是把从这个点向下找一个类似三角形的区域取反，如下图，对$(1,4)$操作，红色为要取反的点。</p><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309031058088.png" style="zoom:50%"/></p><p>​        考虑要把数组全部变成$0$，因为我们的每一次操作都会影响这行之后的元素，且行内的操作不会互相影响，所以考虑按照行数从上到下来进行修改。当发现当前元素为$1$时，我们就执行一次操作即可。显然对于第一行我们最少的的操作就是把所有为$1$的进行修改即可，既然第一行操作确定了，那么后面的操作也就可以确定了，即这样的操作下来一定满足操作次数最小，且全为$0$。</p><p>​        如果操作直接对下面的行进行暴力修改，则时间复杂度为$O(n^4)$，所以要考虑优化操作。</p><p>​        考虑把一个操作转化一下：</p><p>如下图，黄色代表对该点进行一次取反操作。</p><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309031100057.png" style="zoom:50%" /></p><p>那么这次操作可以通过递归拆分为：红色代表对单点进行取反</p><p>对$(i,j)$进行操作相当于对$(i,j)和(i+1,j)$进行取反，然后对黄色部分进行题目中的递归取反操作</p><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309031123624.png" style="zoom:50%" /></p><p>对于递归的黄色操作，我们可以对每个元素记录一个操作次数，对这些地方的操作次数加上$1$，这样就可以$O(1)$完成修改。</p><p>但是要特别注意边界情况</p><p>当黄色在左右边界时，如下图（左边界）：</p><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309031132616.png" style="zoom:50%" /></p><p>操作应该转化为</p><p><img src="https://cdn.jsdelivr.net/gh/fxccover/starnest@main/img/202309031134887.png" style="zoom:50%" /></p><p>右边界同理，这样处理总时间复杂度为$O(n^2)$。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">3000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="type">int</span> a[N][N],cnt[N][N];<span class="comment">//记录操作次数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++) a[i][j+<span class="number">1</span>]=s[j]-<span class="string">&#x27;0&#x27;</span>,cnt[i][j+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[i][j]&amp;<span class="number">1</span>) a[i][j]^=<span class="number">1</span>;<span class="comment">//只有操作次数为奇数时进行取反，异或1即是取反操作 </span></span><br><span class="line"><span class="keyword">if</span>(a[i][j]) a[i][j]^=<span class="number">1</span>,ans++,cnt[i][j]++;</span><br><span class="line"><span class="keyword">if</span>(cnt[i][j]&amp;<span class="number">1</span>)&#123;<span class="comment">//此步进行操作时，递归转化 </span></span><br><span class="line">a[i+<span class="number">1</span>][j]^=<span class="number">1</span>,cnt[i+<span class="number">1</span>][j<span class="number">-1</span>]++,cnt[i+<span class="number">1</span>][j+<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">1</span>&amp;&amp;j!=n) cnt[i+<span class="number">2</span>][j]++;<span class="comment">//边界情况 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//关闭输入输出流</span></span><br><span class="line"><span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1864D-Matrix-Cascade题解&quot;&gt;&lt;a href=&quot;#CF1864D-Matrix-Cascade题解&quot; class=&quot;headerlink&quot; title=&quot;CF1864D Matrix Cascade题解&quot;&gt;&lt;/a&gt;CF1864D Matrix</summary>
      
    
    
    
    
    <category term="题解" scheme="https://fxccover.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>中国剩余定理</title>
    <link href="https://fxccover.github.io/2023/09/02/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <id>https://fxccover.github.io/2023/09/02/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</id>
    <published>2023-09-02T03:37:00.000Z</published>
    <updated>2023-09-03T03:54:49.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中国剩余定理模板："><a href="#中国剩余定理模板：" class="headerlink" title="中国剩余定理模板："></a>中国剩余定理模板：</h3><h4 id="如果模数两两互质"><a href="#如果模数两两互质" class="headerlink" title="如果模数两两互质"></a>如果模数两两互质</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中国剩余定理模板</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">crt</span><span class="params">(ll m[],ll r[],ll n)</span></span>&#123;<span class="comment">//m[]记录除数,r[]记录余数</span></span><br><span class="line">    ll M=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) M*=m[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        ll c=M/m[i],x,y;</span><br><span class="line">        <span class="comment">//计算c在模m[i]意义下的逆元x</span></span><br><span class="line">        <span class="built_in">exgcd</span>(c,m[i],x,y);<span class="comment">//因为gcd(c,m[i])==1</span></span><br><span class="line">        ans=(ans+r[i]*c*x%M)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans%M+M)%M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如果模数不一定两两互质"><a href="#如果模数不一定两两互质" class="headerlink" title="如果模数不一定两两互质"></a>如果模数不一定两两互质</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    ll z=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=z-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ll a1,a2,m1,m2;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; a1 &gt;&gt; m1;<span class="comment">//a1是除数，m1是余数</span></span><br><span class="line">    <span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a2 &gt;&gt; m2;</span><br><span class="line">        ll k1,k2;</span><br><span class="line">        ll d=<span class="built_in">exgcd</span>(a1,a2,k1,k2);</span><br><span class="line">        <span class="comment">//线性同余方程无解</span></span><br><span class="line">        <span class="keyword">if</span>((m2-m1)%d)&#123;</span><br><span class="line">            f=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//a1*k1-a2*k2=m2-m1 </span></span><br><span class="line">        <span class="comment">//a1*k1+a2*k2=gcd(a1,a2)</span></span><br><span class="line">        k1*=(m2-m1)/d;<span class="comment">//exgcd求的是gcd(a1,a2)的逆元,所以要乘以倍数</span></span><br><span class="line">        <span class="comment">//k1通解k1+k*a2/d,k2通解k2+k*a1/d</span></span><br><span class="line">        ll t=a2/d;</span><br><span class="line">        k1=(k1%t+t)%t;<span class="comment">//使得k1能取得最小正整数</span></span><br><span class="line">        m1=k1*a1+m1;<span class="comment">//代表新的余数</span></span><br><span class="line">        a1=<span class="built_in">abs</span>(a1/d*a2);<span class="comment">//合并两个式子中模数的最小公倍数作为新的模数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) cout &lt;&lt; (m1%a1+a1)%a1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;中国剩余定理模板：&quot;&gt;&lt;a href=&quot;#中国剩余定理模板：&quot; class=&quot;headerlink&quot; title=&quot;中国剩余定理模板：&quot;&gt;&lt;/a&gt;中国剩余定理模板：&lt;/h3&gt;&lt;h4 id=&quot;如果模数两两互质&quot;&gt;&lt;a href=&quot;#如果模数两两互质&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="算法模板" scheme="https://fxccover.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>组合数</title>
    <link href="https://fxccover.github.io/2023/08/20/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    <id>https://fxccover.github.io/2023/08/20/%E7%BB%84%E5%90%88%E6%95%B0/</id>
    <published>2023-08-19T16:55:01.000Z</published>
    <updated>2023-09-03T03:50:52.479Z</updated>
    
    <content type="html"><![CDATA[<h4 id="快速幂求组合数"><a href="#快速幂求组合数" class="headerlink" title="快速幂求组合数"></a>快速幂求组合数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C(n,m):适用于n,m&lt;mod,mod是大质数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="type">int</span> f[N],g[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qp</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//初始化n&lt;N</span></span><br><span class="line">f[<span class="number">0</span>]=g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[i]=f[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">g[i]=g[i<span class="number">-1</span>]*<span class="built_in">qp</span>(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f[n]*g[n-m]%mod*g[m]%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="卢卡斯定理求组合数"><a href="#卢卡斯定理求组合数" class="headerlink" title="卢卡斯定理求组合数"></a>卢卡斯定理求组合数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lucas(n,m):适用于n,m&gt;mod,mod是质数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lucas</span>(n/mod,m/mod)*<span class="built_in">C</span>(n%mod,m%mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高精度组合数"><a href="#高精度组合数" class="headerlink" title="高精度组合数"></a>高精度组合数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N],cnt,len,c[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_p</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) p[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;p[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[p[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) res+=n/p,n/=p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getC</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> p)</span></span>&#123;<span class="comment">//C(n,m)中有多少个质数p</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(n,p)-<span class="built_in">get</span>(n-m,p)-<span class="built_in">get</span>(m,p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;<span class="comment">//高精度乘法</span></span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        t+=c[i]*p;</span><br><span class="line">        c[i]=t%<span class="number">10</span>;</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t) c[len++]=t%<span class="number">10</span>,t/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">get_p</span>(<span class="number">1e5</span>+<span class="number">5</span>);</span><br><span class="line">    len=<span class="number">1</span>;</span><br><span class="line">    c[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="type">int</span> prim=p[i];</span><br><span class="line">        <span class="type">int</span> res=<span class="built_in">getC</span>(n,m,prim);</span><br><span class="line">        <span class="keyword">while</span>(res--) <span class="built_in">mul</span>(prim);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) cout &lt;&lt; c[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="卡特兰数公式："><a href="#卡特兰数公式：" class="headerlink" title="卡特兰数公式："></a>卡特兰数公式：</h4><p>​                                                               $H<em>{n}=C^{n}</em>{2n}\ - \ C^{n-1}_{2n}$</p><p>​                                                                   $H<em>{n}=\frac{1}{n+1}C^{n}</em>{2n}$</p><p>​                                                                  $H<em>{n}=\frac{4n-2}{n+1}H</em>{n-1}$</p><h5 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h5><h5 id="1-一个有-n-个0和-n-个1组成的字串，且所有前缀字串皆满足1的个数不超过0的个数。这样的字串个数有多少？"><a href="#1-一个有-n-个0和-n-个1组成的字串，且所有前缀字串皆满足1的个数不超过0的个数。这样的字串个数有多少？" class="headerlink" title="1.一个有$n$个0和$n$个1组成的字串，且所有前缀字串皆满足1的个数不超过0的个数。这样的字串个数有多少？"></a>1.一个有$n$个0和$n$个1组成的字串，且所有前缀字串皆满足1的个数不超过0的个数。这样的字串个数有多少？</h5><h5 id="2-包含-n-组括号的合法运算式的个数有多少？"><a href="#2-包含-n-组括号的合法运算式的个数有多少？" class="headerlink" title="2.包含$n$组括号的合法运算式的个数有多少？"></a>2.包含$n$组括号的合法运算式的个数有多少？</h5><h5 id="3-一个栈的进栈序列为1，2，3-…，-n-，有多少不同的出栈序列？"><a href="#3-一个栈的进栈序列为1，2，3-…，-n-，有多少不同的出栈序列？" class="headerlink" title="3.一个栈的进栈序列为1，2，3,…，$n$，有多少不同的出栈序列？"></a>3.一个栈的进栈序列为1，2，3,…，$n$，有多少不同的出栈序列？</h5><h5 id="4-n-个结点可构造多少个不同的二叉树？"><a href="#4-n-个结点可构造多少个不同的二叉树？" class="headerlink" title="4.$n$个结点可构造多少个不同的二叉树？"></a>4.$n$个结点可构造多少个不同的二叉树？</h5><h5 id="5-在圆上选择-2n-个点，将这些点成对连接起来使得所得到的-n-条弦不相交的方法数？"><a href="#5-在圆上选择-2n-个点，将这些点成对连接起来使得所得到的-n-条弦不相交的方法数？" class="headerlink" title="5.在圆上选择$2n$个点，将这些点成对连接起来使得所得到的$n$条弦不相交的方法数？"></a>5.在圆上选择$2n$个点，将这些点成对连接起来使得所得到的$n$条弦不相交的方法数？</h5><h5 id="6-通过连接顶点而将-n-2-条边的凸多边形分成-n-个三角形的方法数？"><a href="#6-通过连接顶点而将-n-2-条边的凸多边形分成-n-个三角形的方法数？" class="headerlink" title="6.通过连接顶点而将$n+2$条边的凸多边形分成$n$个三角形的方法数？"></a>6.通过连接顶点而将$n+2$条边的凸多边形分成$n$个三角形的方法数？</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;快速幂求组合数&quot;&gt;&lt;a href=&quot;#快速幂求组合数&quot; class=&quot;headerlink&quot; title=&quot;快速幂求组合数&quot;&gt;&lt;/a&gt;快速幂求组合数&lt;/h4&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
    <category term="算法模板" scheme="https://fxccover.github.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
</feed>
